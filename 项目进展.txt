========================================
  AI企业需求计算器 - 项目进展报告
========================================

更新时间：2025-10-17


一、已完成功能
========================================

1. 前端界面 ✅
--------------
• 响应式布局设计（支持桌面端和移动端）
• 主页面结构和导航栏
• 用户认证界面（登录/注册对话框）
• 评估表单（所有输入字段）
• 评估结果展示页面
• 反馈系统界面（模块反馈和浮动反馈按钮）

2. 用户输入表单 ✅
--------------
• 模型选择下拉框
  - 已内置选项：GPT-4、GPT-3.5、Claude 3 系列、Llama 3 系列、Mistral 系列
• 硬件配置
  - 硬件型号选择：A100(80GB/40GB)、H100、V100、RTX 4090/3090
  - GPU卡数输入
• 业务数据
  - 数据量输入
  - 数据类型多选（文本、图片、QA Pair、视频、音频）
  - 数据治理选择（是/否）
• 业务场景描述（文本框）
• 性能要求
  - 期望QPS
  - 用户并发数

3. 可视化组件 ✅
--------------
• 评估总览仪表盘
  - 综合评分展示
  - 雷达图（五维度：预训练/微调/推理/技术/商业）
  - 关键指标卡片
• 资源可行性卡片
  - 环形进度条（显存使用率）
  - 条形进度条（显存需求 vs 可用）
  - 状态指示器（可行/不可行）
  - 彩色边框（自动变色）
• 技术方案评分仪表
  - 分段彩色评分条
  - 动态指针
  - 问题和建议高亮展示
• 商业价值图表
  - 评分展示
  - 风险和机会对比卡片

4. 交互功能 ✅
--------------
• 手机号登录/注册（前端验证）
• 表单输入验证
• 评估按钮和加载状态
• 输入摘要卡片（评估后左侧显示）
• 重新编辑功能
• 模块反馈（点赞/点踩）
• 浮动反馈按钮

5. API接口框架 ✅
--------------
已创建所有API路由文件，包含基础结构：
• /api/auth/register - 用户注册
• /api/auth/login - 用户登录
• /api/auth/logout - 用户登出
• /api/evaluate - 评估请求（核心接口）
• /api/feedback/module - 模块反馈
• /api/feedback/general - 通用反馈

6. 类型定义 ✅
--------------
• TypeScript类型定义完整（lib/types.ts）
• API请求/响应格式规范
• 前后端类型对齐

7. 项目文档 ✅
--------------
• 使用教程.txt（含Node.js安装指南）
• Git协作教程.txt（团队协作指南）
• API接口规范文档（docs/api-spec.md）
• 可视化组件指南（docs/visualization-guide.md）


二、待完成功能（核心缺失部分）
========================================

【重要】以下功能需要补充完整的业务逻辑和数据支持


1. 后端评估逻辑 ⚠️ 需要补充
========================================

当前状态：
• API接口已创建，包含演示逻辑
• 返回的是模拟数据，计算逻辑不准确
• 需要替换为真实的业务计算逻辑

需要补充的内容：

(1) 资源可行性评估逻辑
------------------------
缺失内容：
• 模型参数量数据库
  - 各个模型的参数量（如GPT-4: 1.76T, Llama 3 70B: 70B等）
  - 不同精度下的存储需求系数（FP32/FP16/INT8/INT4）

• 硬件规格数据库
  - 各GPU型号的显存容量（如A100 80GB、H100 80GB等）
  - 理论算力（TFLOPS）
  - 带宽参数

• 显存计算公式
  预训练显存需求：
    - 模型参数显存 = 参数量 × 精度字节数
    - 优化器状态显存（Adam需要额外2倍参数量）
    - 梯度显存（1倍参数量）
    - 激活值显存（与batch size和序列长度相关）
    - 总需求 ≈ 参数量 × (4 + 8 + 4 + 激活系数)

  微调显存需求：
    - 全量微调：类似预训练
    - LoRA微调：参数量 × (基础显存 + LoRA秩系数)
    - QLoRA微调：4bit量化 + LoRA

  推理显存需求：
    - 模型参数显存 = 参数量 × 精度字节数
    - KV Cache显存 = batch_size × 序列长度 × 隐藏层维度 × 层数 × 2
    - 总需求 ≈ 参数量 × 精度字节数 + KV Cache

• QPS和吞吐量计算公式
  - 理论QPS = 算力 / (单次推理计算量)
  - 实际QPS需考虑：
    * 批处理大小（batch size）
    * 序列长度
    * 模型结构复杂度
    * 硬件利用率（通常50%-80%）
  - 公式参考：QPS ≈ (GPU算力 × 利用率) / (模型FLOPs × 序列长度)

• 量化方案对比数据
  - FP16：基准性能，100%精度
  - INT8：~2倍速度提升，~1%精度损失，显存减半
  - INT4：~4倍速度提升，~3-5%精度损失，显存减少75%


(2) 技术方案合理性评估逻辑
------------------------
缺失内容：
• AI评估助手的Prompt设定
  需要设计Prompt来分析：
  - 模型选择是否适合业务场景
  - 数据类型与模型类型的匹配度
  - 硬件配置是否合理
  - 性能要求是否现实

  示例Prompt框架：
  """
  你是一个AI技术专家，请评估以下AI项目的技术方案合理性：

  用户选择的模型：{model}
  硬件配置：{hardware} × {cardCount}
  业务场景：{businessScenario}
  数据类型：{dataTypes}
  数据量：{dataVolume}
  性能要求：QPS {qps}, 并发 {concurrency}

  请从以下维度评估（0-100分）：
  1. 模型选择的适配性
  2. 硬件配置的合理性
  3. 数据准备的充分性
  4. 性能预期的现实性

  输出格式：
  - 总分：XX分
  - 发现的问题：[问题列表]
  - 改进建议：[建议列表]
  """

• 评分规则矩阵
  - 不同场景下的推荐模型类型
  - 数据量与模型规模的匹配规则
  - 硬件与模型的最佳配比


(3) 商业价值评估逻辑
------------------------
缺失内容：
• AI评估助手的Prompt设定
  需要基于以下维度生成分析：
  - 投资回报预测
  - 市场竞争力分析
  - 实施风险评估
  - 发展机会识别

  示例Prompt框架：
  """
  你是一个AI商业顾问，请评估以下AI项目的商业价值：

  业务场景：{businessScenario}
  预计投入：硬件成本（{hardware} × {cardCount}）
  数据资产：{dataVolume}条数据，类型{dataTypes}
  数据治理状态：{dataQuality}
  目标性能：{qps} QPS

  请评估：
  1. 商业价值得分（0-100）
  2. 潜在风险（3-5条）
  3. 发展机会（3-5条）
  4. 详细的价值分析（200字左右）
  """

• 成本估算模型
  - 硬件采购/租赁成本参考价格
  - 运营维护成本估算
  - 人力成本估算
  - ROI计算公式

• 行业标杆数据
  - 不同行业的AI应用成熟度
  - 典型场景的成功案例
  - 投资回报周期参考


2. 数据库支持 ⚠️ 需要设计
========================================

当前状态：
• 无数据库，所有数据在内存中
• 用户数据和评估历史无法持久化

需要补充的内容：

• 数据库选型（推荐）
  - 用户数据：PostgreSQL / MongoDB
  - 评估历史：同上
  - 反馈数据：同上

• 数据表设计
  users表：
    - id, phone, password_hash, username, created_at

  evaluations表：
    - id, user_id, model, hardware, card_count
    - business_data, business_scenario
    - performance_requirements
    - result_json (存储完整评估结果)
    - created_at

  module_feedback表：
    - id, evaluation_id, user_id, module_type
    - feedback_type, comment, created_at

  general_feedback表：
    - id, user_id, type, title, description
    - email, created_at

• ORM/数据库客户端
  - Prisma（推荐，类型安全）
  - 或 直接使用 PostgreSQL 客户端


3. AI能力接入 ⚠️ 需要对接
========================================

需要对接的AI服务：

• 技术方案评估助手
  - 推荐使用：GPT-4、Claude 3.5 Sonnet、文心一言等
  - API接入和鉴权
  - Prompt工程和优化
  - 响应解析和格式化

• 商业价值评估助手
  - 同上
  - 需要针对商业分析场景优化Prompt

• API配置
  - OpenAI API Key（如使用GPT）
  - Anthropic API Key（如使用Claude）
  - 或其他国内大模型API Key


4. 认证和安全 ⚠️ 需要完善
========================================

当前状态：
• 手机号密码登录已实现前端验证
• Token生成是简单的随机字符串
• 无加密存储

需要补充的内容：

• 密码加密
  - 使用bcrypt进行密码哈希
  - 示例：bcrypt.hash(password, saltRounds)

• JWT Token
  - 生成：jwt.sign({userId, phone}, SECRET_KEY, {expiresIn: '7d'})
  - 验证：jwt.verify(token, SECRET_KEY)

• 中间件
  - 路由权限保护中间件
  - Token验证中间件

• 手机号验证码（可选增强）
  - 对接短信服务（阿里云、腾讯云等）
  - 验证码生成和验证逻辑


5. 部署配置 ⚠️ 待定
========================================

需要确定：
• 服务器环境（云服务器 / 容器化部署）
• 域名和SSL证书
• 环境变量配置（数据库连接、API Keys等）
• CI/CD流程（可选）


三、数据资源需求清单
========================================

为了完成评估逻辑，需要准备以下数据：

1. 模型参数表（models.json）
--------------
{
  "GPT-4": {
    "parameters": "1.76T",
    "parametersInB": 1760,
    "hiddenSize": 12288,
    "layers": 120,
    "vocabulary": 100000
  },
  "Llama 3 70B": {
    "parameters": "70B",
    "parametersInB": 70,
    ...
  },
  ...
}

2. 硬件规格表（hardware.json）
--------------
{
  "NVIDIA A100 (80GB)": {
    "memory": 80,
    "memoryUnit": "GB",
    "computePower": 312,
    "computeUnit": "TFLOPS",
    "bandwidth": 2039,
    "bandwidthUnit": "GB/s"
  },
  ...
}

3. 计算公式配置（formulas.json）
--------------
{
  "pretraining": {
    "baseMemoryFactor": 4,
    "optimizerFactor": 8,
    "gradientFactor": 4,
    "activationFactor": 2
  },
  "inference": {
    "kvCacheFactor": ...,
    "utilizationRate": 0.7
  }
}

4. 评估Prompt模板（prompts.json）
--------------
{
  "technicalAssessment": "你是一个AI技术专家...",
  "businessValue": "你是一个AI商业顾问..."
}


四、开发优先级建议
========================================

建议按以下顺序推进：

第一阶段（P0 - 核心功能）：
1. 准备模型和硬件数据库
2. 实现资源可行性计算逻辑
3. 对接AI评估助手（技术和商业）
4. 完善用户认证（密码加密 + JWT）

第二阶段（P1 - 数据持久化）：
5. 设计并创建数据库
6. 实现评估历史存储和查询
7. 实现反馈数据存储

第三阶段（P2 - 增强功能）：
8. 添加评估历史查看功能
9. 添加数据导出功能
10. 性能优化和缓存

第四阶段（P3 - 部署上线）：
11. 配置生产环境
12. 域名和SSL配置
13. 监控和日志


五、技术栈总结
========================================

前端：
• Next.js 15（React 框架）
• TypeScript（类型安全）
• Tailwind CSS（样式）
• shadcn/ui（UI组件库）
• Recharts（图表库）

后端：
• Next.js API Routes（服务端）
• 待补充：数据库ORM（Prisma推荐）
• 待补充：AI API对接

待定技术：
• 数据库：PostgreSQL / MongoDB
• 认证：JWT + bcrypt
• AI服务：OpenAI / Claude / 文心一言等


六、团队分工建议
========================================

可以根据团队成员技能进行分工：

• 前端开发：界面优化、新功能UI开发
• 后端开发：评估逻辑实现、数据库设计和API开发
• 算法/AI：计算公式设计、Prompt工程
• 产品/数据：数据收集（模型参数、硬件规格）、业务规则定义
• 测试：功能测试、数据准确性验证


========================================
更新日志：
2025-10-17 - 初始版本，梳理当前进展和待办事项
========================================
